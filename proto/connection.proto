syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package db_connection;

/* 
 * This allows us to form a general implementation for all platforms.
 * Messages are the data objects passed between the client and server.
 * Services are functions that can be called on the server.
 */
 
 /* Request/Argument Types */
 
 // Arguments for Login
 message LoginRequest {
     string username = 13;
     string password = 14;
 }
 
// Arguments used for queries and any updates.
message QueryRequest {
    string id = 10;
    string query = 11;
}

/* Response/Return Types */

// Result from connecting for the first-time
message ConnectResult {
    string id = 12;
}

// Result from executing an SQL Query
message QueryResult {
    repeated string column_names = 3;
    repeated RowValue row_values = 4;
}

// Result from executing an SQL Update Command 
message UpdateResult {
    string message = 1;
}

// Result from executing a Version Control Command
message VersionControlResult {
    string message = 2;
}

// Value of one row
message RowValue {
    repeated CellValue cell_values = 5;
}

// Value of one 'cell'
message CellValue {
    oneof cell_type {
        string col_string = 6;
        int32 col_i32 = 7;
        google.protobuf.Timestamp col_time = 8;
        float col_float = 9;
        double col_double = 16;
        int64 col_i64 = 17;
        bool col_bool = 18;
        google.protobuf.Empty col_null = 19;
    }
}

// Services are the "functions" exposed by the server.
service DatabaseConnection {
    // We can optionally have a VC query function here, or just parse that within Update
    rpc ConnectDB(LoginRequest) returns (ConnectResult);
    rpc DisconnectDB(ConnectResult) returns (google.protobuf.Empty);
    rpc RunQuery(QueryRequest) returns (QueryResult);
    rpc RunUpdate(QueryRequest) returns (UpdateResult);
    rpc RunVersionControlCommand(QueryRequest) returns (VersionControlResult);
}